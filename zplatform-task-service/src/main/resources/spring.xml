<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">
	 
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
           <list>  
              <!-- 推荐使用file的方式引入，这样可以将配置和代码分离   -->
              <value>file:D:/cert/*.properties</value> 
              <value>file:/home/web/trade/config/*.properties</value> 
              <value>classpath:*.properties</value>  
            </list>  
        </property>  
    </bean>   
	<aop:aspectj-autoproxy/>
	<context:component-scan base-package="com.zlebank.zplatform"/>
	<bean id="logHelper" class="com.zlebank.zplatform.task.util.LogHelper"/>
	<aop:config>
	    <aop:aspect ref="logHelper">
	        <aop:pointcut id="pointcut" expression="execution(* com.zlebank.zplatform..*.*(..))"/>
	        <aop:before method="before"  pointcut-ref="pointcut" />
	        <aop:after method="after" pointcut-ref="pointcut" />
	        <aop:around method="around"  pointcut-ref="pointcut" />
	        <aop:after-throwing method="throwException" pointcut-ref="pointcut" throwing="ex" />
	    </aop:aspect>
	</aop:config>

    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxTotal" value="${redis.maxActive}" />
        <property name="maxWaitMillis" value="${redis.maxWait}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
        p:host-name="${redis.host}" p:port="${redis.port}"  p:pool-config-ref="poolConfig"/>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">   
        <property name="connectionFactory"   ref="connectionFactory" />   
        <property name="keySerializer">   
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />   
        </property>      
        <property name="valueSerializer">   
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />   
        </property>   
        <property name="hashKeySerializer">     
           <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>     
        </property>   
        <property name="hashValueSerializer">   
           <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>     
        </property> 
     </bean> 
	
    <!-- 异步通知任务 -->
    <bean id="tradeNotifyJob" class="com.zlebank.zplatform.task.job.TradeNotifyJob" />
    <bean id="tradeNotifybDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="tradeNotifyJob" />
		<property name="targetMethod" value="tradeNotify" />
		<!-- 对于相同的JobDetail，当指定多个Trigger时, 很可能第一个job完成之前，第二个job就开始了。指定concurrent设为false，多个job不会并发运行，第二个job将会被推迟。 -->
		<property name="concurrent" value="false" />
	</bean>
	<bean id="tradeNotifyJobTrigger"
	 class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="tradeNotifybDetail" />
		<!-- 启动延迟1秒 -->
		<property name="startDelay" value="1000" />  
		<!-- 1分钟执行一次任务 -->
		<property name="repeatInterval" value="60000" />
    </bean>
    
    <!-- scheduler -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="tradeNotifyJobTrigger"/>
				<!-- reconcile start -->
				<ref bean="createMemberFileTrigger" />
				<ref bean="createBondSDFileTrigger" />
				<ref bean="createTransferAccountFileTrigger" />
				<!-- reconcile end -->
			</list>
		</property>
	</bean>
	
	<!-- import -->
	<import resource="spring-hibernate.xml"/>
	<import resource="spring-dubbo.xml"/>
	<import resource="spring-reconcile.xml"/>
</beans>
